<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2019%2F11%2F18%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
  </entry>
  <entry>
    <title><![CDATA[【应用算法】信息流-推荐系统的去重策略]]></title>
    <url>%2F2019%2F09%2F01%2Fmy-post5%2F</url>
    <content type="text"><![CDATA[聊两个问题，它们看似和推荐系统没有必然关系，但实际上，在你构建自己的推荐系统的时候，不可避免地会遇到这两个问题。 去重是刚需在推荐系统中，有一个刚需就是去重，那么说在哪些地方有去重的需求呢？主要是在两个地方：一个是内容源去重，另一个是不重复给用户推荐。 先说说内容源的去重。 如果一个平台自己不生产内容，只是做内容搬运和聚合分发，那么从大量第三方的内容生产处抓取内容，就难免遇到相似甚至重复的内容。这就需要对内容做一个重复检测了。 对内容做重复检测，直观的思路是分词，然后提取关键词，再两两计算词向量之间的距离，距离小于一定阈值后就判定为重复。然而，这对于海量内容，比如几千万以上的内容来说简直就是灾难。 其实，内容源去重并不是仅在推荐系统中才首次出现，这早在搜索引擎时代就是一个刚需了，搜索引擎把整个互联网的网页都下载到自己的服务器上，这时，重复冗余的内容就需要被检测出来。 另一个需求是在内容阅读类推荐场景下，给用户推荐的内容不要重复，推荐过的内容就不再出现在推荐候选集中。 在你刷一个信息流产品时，不断看到重复的内容，想必不是使用感很好的一件事。因为以抓取作为主要内容来源的信息流产品，不同于社交网站上用户自发产生内容，除非遇到用户恶意发送，否则后者是不容易重复的。 以上两个场景，需要在你打造自己的推荐系统时予以考虑和应对。 今天就介绍两种最常见的去重算法，两者有相通之处也有不同的之处。 1. Simhash内容重复检测，是搜索引擎公司最先遇到的，所以 Google 在 07 年公开了他们内部的内容重复检测算法，这个算法简单有效，甚至造福了今天的信息流推荐产品。 对于很长的内容，如果只是检测绝对重复，也就是说完全一模一样的那种情况，那么使用 MD5 这样的信息指纹方法非常高效，无需再去分词、提取关键词和计算关键词向量之间的距离。 我们直接将原始的内容映射为一个短字符串，这个短字符串就是原始内容的指纹，虽然不是绝对保证和原始内容一一映射，但是不同内容能得到相同指纹的概率非常小。 只是这种信息指纹的方法有个非常明显的坏处就是，哪怕原始内容改一个字，得到的信息指纹就会截然不同。 这就没法愉快地玩耍了，你一定希望的是只要主要内容不变，就算一些不太重要的词句不同，也仍然可以得到相近甚至相同的指纹。这才能更加灵活地进行内容重复检测。是否有这样的算法？有，就是 Simhash。 Simhash 核心思想也是为每个内容生成一个整数表示的指纹，然后用这个指纹去做重复或者相似的检测。下面这个示意图说明了 Simhash 如何把一个原始内容表示成一个整数指纹。 好，现在详细说明一下这个过程。 首先，对原始内容分词，并且计算每个词的权重； 对每个词哈希成一个整数，并且把这个整数对应的二进制序列中的 0 变成 -1，1 还是 1，得到一个 1 和 -1 组成的向量； 把每个词哈希后的向量乘以词的权重，得到一个新的加权向量； 把每个词的加权向量相加，得到一个最终向量，这个向量中每个元素有正有负； 把最终这个向量中元素为正的替换成 1，为负的替换成 0，这个向量变成一个二进制位序列，也就是最终变成了一个整数。 最终这个整数就代表了原始的内容。这个 Simhash 奇妙在哪呢？ 看这个示意图中，故意加了一个不太重要的词“了”，它的权重是 1，对应的加权向量元素不是 1 就是 -1，在上述的第四步中，如果这个词对应的向量缺少了，其实根本不影响最终得到那个整数，因为它很难改变最终向量元素的正负。这就是为什么那些不太重要的词不影响内容之间的重复检测。 Simhash 为每一个内容生成一个整数指纹，其中的关键是把每个词哈希成一个整数，这一步常常采用 Jenkins 算法。这里简单示意的整数只有 8 个二进制位，实际上可能需要 64 个二进制位的整数，甚至范围更大。 得到每个内容的 Simhash 指纹后，可以两两计算汉明距离，比较二进制位不同个数，其实就是计算两个指纹的异或，异或结果中如果包含 3 个以下的 1，则认为两条内容重复。 为了高效，也可以直接认为指纹相同才重复，视情况而定。 2. Bloomfilter除了内容重复检测，还有一个需求是防止已经推荐的内容被重复推荐。这个刚需和上述内容重复相比，最大的不同就是过滤对象不同，上述 Simhash 过滤对象是内容本身，而这里则一般是内容的 ID。 内容的 ID 一般是用一个 UUID 表示，是一个不太长的字符串或者整数。 对于这类形如模式串的去重，显然可以用单独专门的数据库来保存，为了高效，甚至可以为它建上索引。 但对于用户量巨大的情况下，这个做法对存储的消耗则不可小看。实际上，解决这类看一个字符串在不在一个集合中的问题，有一个有点老但很好用的做法，就是 Bloomfilter，有时候也被称为布隆过滤器。 布隆过滤器的原理也要用到哈希函数。它包含两部分：一个很长的二进制位向量，和一系列哈希函数。Bloomfilter 是一个很巧妙的设计，它先把原始要查询的集合映射到一个长度为 m 的二进制位向量上去，它映射的方法是： 设计 n 个互相独立的哈希函数，准备一个长度为 m 的二进制向量，最开始全是 0； 每个哈希函数把集合内的元素映射为一个不超过 m 的正整数 k，m 就是二进制向量的长度； 把这个二进制向量中的第 k 个位置设置为 1；也就是一个元素会在二进制向量中对应 n 个位置为 1。 看示意图。 这个示意图中，原始的模式串经过三个互相独立的哈希函数，映射到 8 位二进制向量中的三个位置了。 原始的模式串集合经过这样的处理后，就得到一个很大的二进制向量。在应用阶段时，假如来了一个模式串 s，需要查询是否在这个集合中，也需要经过同样的上述步骤。 每个哈希函数对这个模式串 s 哈希后都得到一个整数，看看这个整数在二进制向量中所指示的位置是不是 1，如果每个哈希函数所指示的位置都是 1，就说明模式串 s 已经在集合中了。 需要说明的是，Bloomfilter 也并不是百分之百保证的，有很小的概率把原本不存在集合中的模式串判断为存在。这样就会造成那些明明还没有推荐给用户的内容 ID 就再也不会推荐给用户了，当然，这个小概率是可以承受的。 总结介绍了两种去重算法。在推荐系统中，虽然我们十分关心推荐匹配的效果，但是别忘了，对原始内容的挖掘和清洗往往更加重要。这其中就包括对重复内容的检测。 两种去重策略都是牺牲一点误伤的概率换得大幅度的效率提升，具体的做法都是要借助哈希函数。只是哈希函数的结果在两个算法中有不同的处理手段，Simhash 是加权，Bloomfilter 则是用来做寻址。 有一个思考题，请你想一想，如果要从 Bloomfilter 中去掉一个元素，该怎么做？有兴趣，可以一起探讨一下。 共勉，(๑•̀ㅂ•́)و✧加油 Minbo]]></content>
      <categories>
        <category>算法</category>
        <category>推荐系统</category>
        <category>架构</category>
      </categories>
      <tags>
        <tag>信息流</tag>
        <tag>推荐系统</tag>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[2018年上半年阅读总结]]></title>
    <url>%2F2018%2F06%2F22%2Fmy-post4%2F</url>
    <content type="text"><![CDATA[上半年看了一些书，简单总结一下 坚持阅读古人云：“活到老，学到老。” IT技术发展太快，行业日新月异，作为最苦逼职业之一，软件工程师，只能不停的学习、深造、提升。总之，学不可以已，所以，保持良好的心态，持之以恒，这个很重要。 以下是今年上半年阅读的相关书籍，这里分享七本： 1.《亿级流量-高并发高可用架构实战》张开涛 江湖人称”涛哥”，京东大牛，一次偶然的机会，通过中生代技术了解到了这本书，一些大牛的公众号也有推荐过此书，真正的干货实战书。 去年下半年购买入手，读过了一次。当时正在紧急开发一个互联网项目，用户体量和访问流量预估还不低，虽然有过类似项目的架构设计和开发经验，但当时内心还是有一些忐忑，毕竟没有做过真正的大日活互联网的产品项目，目前月活千万左右，当时整个业务复杂程度也不低，顶着开发时间压力和上线压力，推进项目往前走，而负责整个后台技术架构，我急需系统化地补充和丰富加强这方面的知识，正当焦虑不已、烦恼失眠的时候拥有了此书，仿佛得到了神助攻，系统化地学到了一线互联网公司常见的技术实战经验，和能直接实施落地的解决方案，完整且系统地介绍了”高并发””高可用”这六个字涵盖了几乎所有的方方面面，帮到了我很多很多。今年年初又读了一遍，同时把它也作为了自己的一本常用字典书，温故而知新。 如果你也有和我同样遇到了这方面的需要，此书你一定不能错过，任何一位架构师或者立志成为架构师的你，真的应该读一读此书。 2.《高性能Mysql》第三版 这本书常年进入到技术类的畅销榜单，应用Mysql的必备工具书之一，很多人都推荐过。像我们目前作为一个月活千万的产品，日数据量增速也不低，一个良好且稳定的数据库设计非常重要。 当时产品项目上线后，由于前期的数据库表设计不当，导致扩展性低，索引问题、Sql问题等引发了好几次线上故障，DB的CPU/读写IO分别接连遭遇爆表，修复BUG折腾到几乎怀疑人生。由于使用了阿里云的RDS，硬件基础设施优化倒不用怎么考虑，更多地是在上层优化，学习和实践。 比如不同存储引擎的区别是什么？索引原理是什么？索引到底应该怎么建、选择哪种类型、哪种算法？各自实际场景该如何选择？分库分表、读写分离如何实施？分表算法使用哪种高效、稳定性和扩展性高？主从延迟大怎么办？在线数据迁移如何最大化减轻对线上的影响？分布式下主键值怎么生成、空间占用最小、检索性能最好？Sql怎么编写性能高、效率高？如何避免sql中的索引失效？查询慢具体原因是什么？执行计划各个指标如何查看评估和分析？等等一系列的问题，这本书中的一些章节内容帮到了我很多，同时美团技术团队分享出来的这方面文章，我csdn博客中有转载此类文章，也学到了很多一线的实战内容。 3.《阿里巴巴JAVA开发手册》，阿里巴巴 去年11月云溪大会时，阿里推出了一系列技术群书，此书是其中一本，于年初入手了。阿里，作为国内JAVA重度使用者之一，首次披露内部的开发标准和规范，目的是：码出高效，码出质量。 从严格意义上讲，本书超越了Java语言本身，明确作为一名合格开发者应该具备的基本素质，本书以开发者为中心视角，划分为编程规约、异常日志、单元测试、安全规约、MySQL数据库、工程结构、设计规约七个维度，每个条目下有相应的扩展解释和说明，正例和反例，全面、立体、形象地帮助到开发者的成长和团队代码规约文化的形成。 我一直觉得：一个优秀的工程师和一个普通工程师的区别，不是满天飞的架构图，他的功底体现在所写的每一行代码上，”talk is cheap, show me the code”，也一直都是我的IT编程座右铭之一。 以阿里的技术底蕴为基础打造的此书，一定不会让你失望的。技术没有终点站，只有不断打磨技术，去成为更好的自己，我们共勉。 4.《口渴之前先挖井》哈维·麦凯 一次偶然机会入手了此书，在一个技术牛人公众号中看到推荐了此书，单看书名就有点意思想买了。如果你认为是鸡汤书，那你就大错特错了。 如今社会，各行各业，无论你多聪明，无论你多有天赋，你都不可能只依靠一己之力。成功人士所共有的一个特点，那就是：他们都有很强的创建并维护一个人际网的能力，拥有高质量、靠谱稳定的朋友圈。人际网的建设，其实是最应该学会的处世本领，无论多年轻都可以，学得越早、受益越多。 书中有很多案讲解，比如如何建立并扩大自己的人际网？有哪些套路？比如，不要在一场聚会上获取25张业务名片，泛泛之交是没有用的。最佳的方法是，在参加一个聚会或商业会议时，一次只认识2到3个人，然后对他们作深入的了解。再比如，如何与久未联系的同事或朋友保持亲密的关系？首先要做的，是去朋友那里，看有什么可以帮助的。记住最好的方法就是，不要求别人为你做什么，只要想能为别人做什么，这才是建立人际网的真正艺术。 滴水之恩，要涌泉相报，人对我好，我十倍还之，反之，则道不同不相为谋，避而远之即可。如果你想知道关于更多的关系人际关系建设内容，可以读一读此书。 5.《智能时代》，吴军 一直对吴军的书很中意，像《浪潮之巅》《数学之美》等，此书也是逻辑思维推荐的畅销书之一。 此书的内容，从数据对人类的作用，数据如何从量变到质变，数据如何推动思维革命，数据在商业上起到的作用，数据如何收集和确保安全，数据和人类隐私的关系，再到数据带来的智能革命对于社会所产生的影响。所有的思维、思考，描述得行云流水，阐释得十分简练清晰，一气呵成读完，十分酣畅淋漓的感觉，有人称他是”中国版的普罗米修斯”。 吴军认为，在智能时代，只有2%的人能够脱颖而出，其余98%的人将成为鱼腩。那时，大量的工作岗位消失，大量的人被迫离开熟悉的环境和生活，费解于社会的巨变，陷入命运的颠簸。在智能革命到来之际，我们要么加入到这次浪潮中，要么观望徘徊，最后被淘汰。但也只有2%的喜欢吃螃蟹的人愿意加入到机器智能的队伍中来。任何一次技术革命，最初受益的都是发展它、使用它的一代，而远离他、拒绝接受他的人，在很长时间里都将是迷茫的一代。简言之，面对人工智能，要么拥抱，要么死去。因为，这既是一个让人振奋不已的时代，也是一个充满空前挑战的时代，而我，就是一个特别喜欢做挑战的事的人。 好吧(∩_∩)，我知道你也许读到这里焦虑迷茫了，不用着急，读一读此书，你也许就轻松开朗了。 6.《人工智能》，李开复 加上《未来简史》《智能时代》，这是我读的第三本关于AI，人工智能，关于未来的书了。 这本书，主题上讨论了个人应该做些什么，才能避免被AI取代？企业应该如何升级，才能在新的商业变局到来前抓住先机？有关于思考未来商业产品应用，也讲了个人在人工智能时代该如何学习，比较有价值。 三本书，体会着三个不同人思考的方式和观察角度。总体上感觉李的书，故事性更强一些，可以作为初级的人工智能科普书。 的确，刚开始看完了是有些焦虑，但我也不担忧和惧怕人工智能时代的到来，还是觉得当下要做的，应当是尽早认清AI是什么，了解其规律，思考商业产品应用，与自身个人实际情况相结合，去拥抱新时代的到来，投入其中。 7.《DevOps实战三十六计》，高效运维社区 我算是第一批加入高效运维社区群的人之一，很早就关注到了DevOps，期待本书很久了。它是Development（开发）和Operation（运维）两个单词的缩写，它以自动化为基本，以配合协作为黏合剂，以服务业务为己任，从调研、需求、设计到开发、测试，安装、运维及运营，贯串于软件的全部生命周期。 DevOps是目前加快从需求到应用上线的上好途径，涵盖了产品设计、敏捷开发、微服务设计、持续集成和部署、自动化运维等各个关键环节。DevOps源于技术，但又超越技术。 此书，从精益、敏捷、开发、测试、运维、架构、安全等各个方面分享他们在顶级互联网公司及领先的传统企业的多年智慧和经验总结，分享了很多踩过的坑，以及经历的血的教训，常备的实用工具书之一。 总结我一直都觉得，阅读是一件值得培养和养成习惯的事情，希望自己能一直坚持下去，保持这个良好的习惯。不太喜欢电子书，还是更多地喜欢纸质的阅读感受。 下半年了，给自己制定了新的学习计划、阅读计划，希望能学到更多的东西，以及实践经验，能走得更远、更稳、更好。 共勉，(๑•̀ㅂ•́)و✧加油，Minbo 其他推荐技术类书 重构-改善既有代码的设计 Clean Code 代码整洁之道 设计模式 非技术类书 番茄时间管理法 高效能人士的七个习惯 拖延心理学]]></content>
      <categories>
        <category>人工智能</category>
        <category>AI</category>
        <category>阅读</category>
        <category>架构</category>
      </categories>
      <tags>
        <tag>JAVA</tag>
        <tag>架构</tag>
        <tag>阅读</tag>
        <tag>AI</tag>
        <tag>人工智能</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[到底什么是微服务？]]></title>
    <url>%2F2017%2F06%2F30%2Fmy-post3%2F</url>
    <content type="text"><![CDATA[微服务到底意味着什么？它与以往的开发架构有何不同？ 背景最近几年，越来越多的开发人员使用“微服务”一词来阐述他们的系统或应用架构，当然或许这只是他们在吹嘘自己在技术潮流中并未落伍。我认为，IT科技行业的人士至少要了解微服务的基础知识，因为它代表着未来的发展方向。即使对我的话半信半疑，还有行业内很多大神为我背书。只是，话说回来，到底什么是微服务呢？ 微服务架构 上图从左到右说明左：单体架构下，应用紧耦合，所有的变更必须一起上线，持续部署就是天方夜谭。中：传统SOA架构允许单独的变更，但是每一个部分必须很谨慎地修改以免破坏整体架构设计。右：在微服务架构下，开发可以独立地创建、维护和改进服务。服务之间通过API连接。 首先，确切地说，当谈到微服务时，我们实际上是指微服务架构。这是一种独特的架构设计模式，它将是软件、web或移动应用拆分为一系列独立的服务——如微服务。这些服务仅用于某一个特定的业务功能，例如：用户管理、用户角色、电子商务购物车、搜索引擎、社交媒体登录等。此外，它们是相互独立的，这意味着它们可以采用不同的编程语言和数据存储。微服务中几乎不存在集中管理，它使用轻量级的HTTP、REST或Thrift API来进行内部通信。 当然有些人会问：嘿，这和SOA有什么不一样？某种程度上，你可以说微服务首先实现了面向服务的架构目标。然而，两种架构之间仍然存在差异。通常，经典的SOA适用于部署一体化架构应用，并且更倾向于平台驱动，而微服务必须是可独立部署的，因此在各个维度上提供了更多的灵活性。当然，最主要的区别应该是规模的不同，“微观”——这个词一听就比常规的SOA要小得多。正如Martin Fowler所说，我们应该将SOA视为微服务的超集。 话虽如此，我们并不把微服务视为革命性的突破，它更像是软件开发进化史中自然而然地往前迈了一步。 微服务的优点与物理世界（PC硬件、宜家家具、汽车等）中的模块化趋势类似，微服务的理念是允许开发人员基于各种独立组件来构建应用程序，这些组件可以轻松更改、删除或升级，而不会影响整个应用程序——这与一体化架构完全不同。这是这种新型架构的主要优点之一。除此之外，某些微服务（例如：文件上传服务）一次开发完成之后，开发人员可以在其他项目中重用该代码的功能。 微服务的另一个重要特征是，与单一应用程序不同的是——单一程序根据应用程序的不同层级来定义团队：用户界面团队，服务器端团队，数据库团队等——微服务允许公司围绕特定业务功能来构建团队。这反过来又驱使团队具备了跨职能能力，从而拥有了一系列更强大的技能：用户体验、数据库管理、项目管理等。这使我们进一步走进DevOps时代。 服务的分散管理使开发人员能够根据特定业务需求选用不同的编程语言，这取决于他们认为哪种语言才是围绕微服务构建的最佳选择。这也意味着他们可以使用独立的数据存储，从而获得这种架构的最大优势——几乎无限的可扩展性。在微服务多地部署完成后，您只需要调整所需的功能，而不是每次都创建整个应用程序的重复实例。这反过来又节省了时间和资源。 在谈到微服务时，不可避免地要提到容器。容器旨在减少运行时所需要的最小可行部件，而不是在同一物理或虚拟机中打包多个功能。话虽如此，容器只是可以优化部署的工具，所以在无容器化环境中，基于微服务架构构建应用程序也不是不可能的。 总结总而言之，微服务的目标是通过将应用程序分解成较小的可组合的部分，以便在需要时可以独立部署、升级、删除或缩放，从而简化构建、维护和管理应用程序。 推荐资料 SprintBoot学习文档 SpringCloud学习文档 Docker学习文档 SprintBoot案例源码 SpringCloud案例源码]]></content>
      <categories>
        <category>架构</category>
        <category>微服务</category>
      </categories>
      <tags>
        <tag>微服务</tag>
        <tag>JAVA</tag>
        <tag>架构</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[大数据技术学习路线]]></title>
    <url>%2F2017%2F06%2F23%2Fmy-post2%2F</url>
    <content type="text"><![CDATA[背景近年来大数据BigData、人工智能AI、物联网Iot等行业发展迅猛，很多人都想要从事大数据技术开发工作，但是，请问要怎么做，路线是什么？从哪里开始学？学哪些？这是一个大问题。对于我自己来说，最近也在学一些大数据开发相关的技术，所以之前整理了一份《大数据技术学习路线》，希望对你有所帮助。 学习规划总共分为五大部分，分别是： 大数据技术基础 离线计算Hadoop 流式计算Storm 内存计算Spark 机器学习算法 目前我学完了约60%的内容，但还有很多需要多实践、和深研的地方，我也在继续学习，和摸索当中。希望你早日能成为大数据技术开发中的一员，然后大家一起学习，和技术交流。 技术说明这里我只列举了技术点，给你提供了一个学习方向，具体实现内容可以借助网络去学习了，相信这方面你应该懂得了如何借助网络力量，然后进行自我学习了。 大数据技术基础linux操作基础 linux系统简介与安装 linux常用命令–文件操作 linux常用命令–用户管理与权限 linux常用命令–系统管理 linux常用命令–免密登陆配置与网络管理 linux上常用软件安装 linux本地yum源配置及yum软件安装 linux防火墙配置 linux高级文本处理命令cut、sed、awk linux定时任务crontab shell编程 shell编程–基本语法 shell编程–流程控制 shell编程–函数 shell编程–综合案例–自动化部署脚本 内存数据库redis redis和nosql简介 redis客户端连接 redis的string类型数据结构操作及应用-对象缓存 redis的list类型数据结构操作及应用案例-任务调度队列 redis的hash及set数据结构操作及应用案例-购物车 redis的sortedset数据结构操作及应用案例-排行榜 布式协调服务zookeeper zookeeper简介及应用场景 zookeeper集群安装部署 zookeeper的数据节点与命令行操作 zookeeper的java客户端基本操作及事件监听 zookeeper核心机制及数据节点 zookeeper应用案例–分布式共享资源锁 zookeeper应用案例–服务器上下线动态感知 zookeeper的数据一致性原理及leader选举机制 java高级特性增强 Java多线程基本知识 Java同步关键词详解 java并发包线程池及在开源软件中的应用 Java并发包消息队里及在开源软件中的应用 Java JMS技术 Java动态代理反射 轻量级RPC框架开发 RPC原理学习 Nio原理学习 Netty常用API学习 轻量级RPC框架需求分析及原理分析 轻量级RPC框架开发 离线计算Hadoophadoop快速入门 hadoop背景介绍 分布式系统概述 离线数据分析流程介绍 集群搭建 集群使用初步 HDFS增强 HDFS的概念和特性 HDFS的shell(命令行客户端)操作 HDFS的工作机制 NAMENODE的工作机制 java的api操作 案例1：开发shell采集脚本 MAPREDUCE详解 自定义hadoop的RPC框架 Mapreduce编程规范及示例编写 Mapreduce程序运行模式及debug方法 mapreduce程序运行模式的内在机理 mapreduce运算框架的主体工作流程 自定义对象的序列化方法 MapReduce编程案例 MAPREDUCE增强 Mapreduce排序 自定义partitioner Mapreduce的combiner mapreduce工作机制详解 MAPREDUCE实战 maptask并行度机制-文件切片 maptask并行度设置 倒排索引 共同好友 federation介绍和hive使用 Hadoop的HA机制 HA集群的安装部署 集群运维测试之Datanode动态上下线 集群运维测试之Namenode状态切换管理 集群运维测试之数据块的balance HA下HDFS-API变化 hive简介 hive架构 hive安装部署 hvie初使用 hive增强和flume介绍 HQL-DDL基本语法 HQL-DML基本语法 HIVE的join HIVE 参数配置 HIVE 自定义函数和Transform HIVE 执行HQL的实例分析 HIVE最佳实践注意点 HIVE优化策略 HIVE实战案例 Flume介绍 Flume的安装部署 案例：采集目录到HDFS 案例：采集文件到HDFS 流式计算StormStorm从入门到精通 Storm是什么 Storm架构分析 Storm架构分析 Storm编程模型、Tuple源码、并发度分析 Storm WordCount案例及常用Api分析 Storm集群部署实战 Storm+Kafka+Redis业务指标计算 Storm源码下载编译 Strom集群启动及源码分析 Storm任务提交及源码分析 Storm数据发送流程分析 Storm通信机制分析 Storm消息容错机制及源码分析 Storm多stream项目分析 编写自己的流式任务执行框架 Storm上下游及架构集成 消息队列是什么 Kakfa核心组件 Kafka集群部署实战及常用命令 Kafka配置文件梳理 Kakfa JavaApi学习 Kafka文件存储机制分析 Redis基础及单机环境部署 Redis数据结构及典型案例 Flume快速入门 Flume+Kafka+Storm+Redis整合 内存计算Sparkscala编程 scala编程介绍 scala相关软件安装 scala基础语法 scala方法和函数 scala函数式编程特点 scala数组和集合 scala编程练习（单机版WordCount） scala面向对象 scala模式匹配 actor编程介绍 option和偏函数 实战：actor的并发WordCount 柯里化 隐式转换 AKKA与RPC Akka并发编程框架 实战：RPC编程实战 Spark快速入门 spark介绍 spark环境搭建 RDD简介 RDD的转换和动作 实战：RDD综合练习 RDD高级算子 自定义Partitioner 实战：网站访问次数 广播变量 实战：根据IP计算归属地 自定义排序 利用JDBC RDD实现数据导入导出 WorldCount执行流程详解 RDD详解 RDD依赖关系 RDD缓存机制 RDD的Checkpoint检查点机制 Spark任务执行过程分析 RDD的Stage划分 Spark-Sql应用 Spark-SQL Spark结合Hive DataFrame 实战：Spark-SQL和DataFrame案例 SparkStreaming应用实战 Spark-Streaming简介 Spark-Streaming编程 实战：StageFulWordCount Flume结合Spark Streaming Kafka结合Spark Streaming 窗口函数 ELK技术栈介绍 ElasticSearch安装和使用 Storm架构分析 Storm编程模型、Tuple源码、并发度分析 Storm WordCount案例及常用Api分析 Spark核心源码解析 Spark源码编译 Spark远程debug Spark任务提交行流程源码分析 Spark通信流程源码分析 SparkContext创建过程源码分析 DriverActor和ClientActor通信过程源码分析 Worker启动Executor过程源码分析 Executor向DriverActor注册过程源码分析 Executor向Driver注册过程源码分析 DAGScheduler和TaskScheduler源码分析 Shuffle过程源码分析 Task执行过程源码分析 机器学习算法python及numpy库 机器学习简介 机器学习与python python语言–快速入门 python语言–数据类型详解 python语言–流程控制语句 python语言–函数使用 python语言–模块和包 phthon语言–面向对象 python机器学习算法库–numpy 机器学习必备数学知识–概率论 常用算法实现 knn分类算法–算法原理 knn分类算法–代码实现 knn分类算法–手写字识别案例 lineage回归分类算法–算法原理 lineage回归分类算法–算法实现及demo 朴素贝叶斯分类算法–算法原理 朴素贝叶斯分类算法–算法实现 朴素贝叶斯分类算法–垃圾邮件识别应用案例 kmeans聚类算法–算法原理 kmeans聚类算法–算法实现 kmeans聚类算法–地理位置聚类应用 决策树分类算法–算法原理 决策树分类算法–算法实现 尾记 看完有信心能坚持学习吗？如果你的答案是肯定的，那就当下开始行动吧！Fighting~ 推荐两个相关的学习博客地址： Hadoop学习教程 Hadoop家族系列文章 Hadoop使用教程]]></content>
      <categories>
        <category>大数据</category>
      </categories>
      <tags>
        <tag>大数据</tag>
        <tag>Hadoop</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[我的个人博客系统终于实施落地了]]></title>
    <url>%2F2017%2F04%2F20%2Fmy-post1%2F</url>
    <content type="text"><![CDATA[背景由于一直饱受CSDN博客的大量植入广告，实在是不堪其扰，所以总想着能自己从零开始搭建一套个人博客系统，完全自由实现，同时拥有能高度自定义的博客系统，今天终于实施落地了。 目标近年来，看了一些书，同时，随着工作年限的增长，对工作、学习、生活等方面都有了一定的认知和感触，所以想输出点东西落地，写点东西，一方面降低自己的大脑中知识存储容量，另一方面也为了将来回头看时，还能欣慰自己曾经留下了一点东西。 工具该系统由Github Pages + Hexo搭配创建，目前整个系统的源码已提交开放我的个人Github项目中，可参考该实例教程，自由下载，自定义属于你自己的个人博客系统。目前访问默认地址是https://hemin1003.github.io/，由于名称记忆不便，所以申请了我个人的域名地址www.heminit.com，该地址已经在阿里云上申请购买，目前正在审批过程中。 规划先定一个小目标，今天规划了第一期，为期十篇的文章Topic，以及第二期的引子Topic。慢慢输出吧，敬请期待，加油(๑•̀ㅂ•́)و✧加油 第一期 Topic 我为什么要搭建自己的博客系统？ 我们到底要招聘一个怎样的IT职业者？ 如何进行高效率地学习？ 英文要不要学？如何学？ 为什么要培养一到两个长期的业余爱好？ 我为什么要做一名终生学习者？ 如何做一个团队管理者？ 你要多读书吗？怎么读？ 我是如何做自己职业规划的。 怎么做时间管理？ 第二期 Topic 《剑指IT Offer系列》 《阅读书单系列》]]></content>
      <categories>
        <category>Thinking</category>
      </categories>
      <tags>
        <tag>启始篇</tag>
        <tag>博客</tag>
        <tag>预热</tag>
      </tags>
  </entry>

  <entry>
    <title><![CDATA[ConcurrentHashMap]]></title>
    <url>%2F2016%2F10%2F01%2Fpost1%2F</url>
    <content type="text"><![CDATA[ConcurrentHashMap]]></content>
      <categories>
        <category>Java</category>
      </categories>
  </entry>
</search>
