java.lang.Object
  java.util.AbstractMap<K,V>
    java.util.concurrent.ConcurrentHashMap<K,V>

ConcurrentHashMap is the out-of-box ready ConcurrentMap implementation.
For better performance, it consists of an array of nodes as table buckets (used to be table segments prior to Java 8) under the hood, and mainly uses CAS operations during updating.
The table buckets are initialized lazily, upon the first insertion. Each bucket can be independently locked by locking the very first node in the bucket. Read operations do not block, and update contentions are minimized.
The number of segments required is relative to the number of threads accessing the table so that the update in progress per segment would be no more than one most of time.

Before Java 8, the number of “segments” required was relative to the number of threads accessing the table so that the update in progress per segment would be no more than one most of time.
That's why constructors, compared to HashMap, provides the extra concurrencyLevel argument to control the number of estimated threads to use:
    public ConcurrentHashMap()
    public ConcurrentHashMap(int initialCapacity, float loadFactor, int concurrencyLevel)
The other two arguments: initialCapacity and loadFactor worked quite the same as HashMap.
However, since Java 8, the constructors are only present for backward compatibility: the parameters can only affect the initial size of the map.

ConcurrentMap guarantees memory consistency on key/value operations in a multi-threading environment.
Actions in a thread prior to placing an object into a ConcurrentMap as a key or value happen-before actions subsequent to the access or removal of that object in another thread.

Most APIs provided by ConcurrentMap does not allow null key or value, for example:
@Test(expected = NullPointerException.class)
public void givenConcurrentHashMap_whenPutWithNullKey_thenThrowsNPE() {
    concurrentMap.put(null, new Object());
}

@Test(expected = NullPointerException.class)
public void givenConcurrentHashMap_whenPutNullValue_thenThrowsNPE() {
    concurrentMap.put("test", null);
}
However, for compute* and merge actions, the computed value can be null, which indicates the key-value mapping is removed if present or remains absent if previously absent.
@Test
public void givenKeyPresent_whenComputeRemappingNull_thenMappingRemoved() {
    Object oldValue = new Object();
    concurrentMap.put("test", oldValue);
    concurrentMap.compute("test", (s, o) -> null);

    assertNull(concurrentMap.get("test"));
}
